openapi: '3.0.2'
info:
  title: 'My Post API'
  version: '1.0.0'
paths:
  /posts/:
    get:
      operationId: listPosts
      summary: 'Возвращает список постов.'
      parameters:
        - name: limit
          in: query
          description: 'Максимальное количество результатов, которые нужно вернуть.'
          schema:
            type: integer
        - name: offset
          in: query
          description: 'Индекс первого результата, который нужно вернуть.'
          schema:
            type: integer
      responses:
        '200':
          description: 'Успешный ответ'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 10
                  next:
                    type: string
                    nullable: true
                    description: 'Ссылка на следующую страницу.'
                    example: 'http://example.com/posts/?offset=10&limit=10'
                  previous:
                    type: string
                    nullable: true
                    description: 'Ссылка на предыдущую страницу.'
                    example: 'http://example.com/posts/?offset=0&limit=10'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
    post:
      operationId: createPost
      summary: 'Создает новый пост.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '201':
          description: 'Успешный ответ'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    /{id}/:
      get:
        operationId: retrievePost
        summary: 'Возвращает информацию о посте с указанным идентификатором.'
        parameters:
          - name: id
            in: path
            description: 'Идентификатор поста.'
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: 'Успешный ответ'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
      put:
        operationId: updatePost
        summary: 'Обновляет информацию о посте с указанным идентификатором.'
        parameters:
          - name: id
            in: path
            description: 'Идентификатор поста.'
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostInput'
        responses:
          '200':
            description: 'Успешный ответ'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
      delete:
        operationId: deletePost
        summary: 'Удаляет пост с указанным идентификатором.'
        parameters:
          - name: id
            in: path
            description: 'Идентификатор поста.'
            required: true
            schema:
              type: integer
        responses:
          '204':
            description: 'Успешный ответ'
  /categories/:
    get:
      operationId: listCategories
      summary: 'Возвращает список категорий.'
      responses:
        '200':
          description: 'Успешный ответ'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /authors/:
    get:
      operationId: listAuthors
      summary: 'Возвращает список авторов.'
      responses:
        '200':
          description: 'Успешный ответ'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author_post:
          type: integer
        post_news:
          type: string
          enum: [NE, PO]
        date_in:
          type: string
          format: date-time
          readOnly: true
        category:
          type: array
          items:
            type: integer
          readOnly: true
        title:
          type: string
        text:
          type: string
        rating_news:
          type: integer
          default: 0
        is_active:
          type: boolean
          default: true
      required:
        - author_post
        - post_news
        - title
        - text
    PostInput:
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
          properties:
            author_post:
              type: integer
              readOnly: true
            post_news:
              type: string
              enum: [NE, PO]
              readOnly: true
            date_in:
              type: string
              format: date-time
              readOnly: true
            category:
              type: array
              items:
                type: integer
              readOnly: true
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
    Author:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        email:
          type: string
        bio:
          type: string